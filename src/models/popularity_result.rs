/*
 * puddle.farm API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PopularityResult {
    /// Character popularity per player
    #[serde(rename = "per_player", skip_serializing_if = "Option::is_none")]
    pub per_player: Option<Vec<models::PopularityResultChar>>,
    /// Character popularity per character
    #[serde(rename = "per_character", skip_serializing_if = "Option::is_none")]
    pub per_character: Option<Vec<models::PopularityResultChar>>,
    /// Total number of players for popularity calculation
    #[serde(rename = "per_player_total", skip_serializing_if = "Option::is_none")]
    pub per_player_total: Option<i64>,
    /// Total number of characters for popularity calculation
    #[serde(rename = "per_character_total", skip_serializing_if = "Option::is_none")]
    pub per_character_total: Option<i64>,
    /// Timestamp of the last update
    #[serde(rename = "last_update", skip_serializing_if = "Option::is_none")]
    pub last_update: Option<String>,
}

impl PopularityResult {
    pub fn new() -> PopularityResult {
        PopularityResult {
            per_player: None,
            per_character: None,
            per_player_total: None,
            per_character_total: None,
            last_update: None,
        }
    }
}

