/*
 * puddle.farm API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlayerResponse {
    /// Player's ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// Player's name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Player's ratings for each character
    #[serde(rename = "ratings", skip_serializing_if = "Option::is_none")]
    pub ratings: Option<Vec<models::PlayerResponsePlayer>>,
    /// Player's platform (PS, XB, PC)
    #[serde(rename = "platform", skip_serializing_if = "Option::is_none")]
    pub platform: Option<String>,
    /// Player's status (Public, Private, Cheater)
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Player's top global rank
    #[serde(rename = "top_global", skip_serializing_if = "Option::is_none")]
    pub top_global: Option<i32>,
    /// Player's tags (awards, titles, etc.)
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<models::TagResponse>>,
}

impl PlayerResponse {
    pub fn new() -> PlayerResponse {
        PlayerResponse {
            id: None,
            name: None,
            ratings: None,
            platform: None,
            status: None,
            top_global: None,
            tags: None,
        }
    }
}

