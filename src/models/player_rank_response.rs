/*
 * puddle.farm API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlayerRankResponse {
    /// Player's rank
    #[serde(rename = "rank", skip_serializing_if = "Option::is_none")]
    pub rank: Option<i32>,
    /// Player's ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// Player's name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Player's rating
    #[serde(rename = "rating", skip_serializing_if = "Option::is_none")]
    pub rating: Option<f32>,
    /// Player's rating deviation
    #[serde(rename = "deviation", skip_serializing_if = "Option::is_none")]
    pub deviation: Option<f32>,
    /// Short name of the character
    #[serde(rename = "char_short", skip_serializing_if = "Option::is_none")]
    pub char_short: Option<String>,
    /// Full name of the character
    #[serde(rename = "char_long", skip_serializing_if = "Option::is_none")]
    pub char_long: Option<String>,
}

impl PlayerRankResponse {
    pub fn new() -> PlayerRankResponse {
        PlayerRankResponse {
            rank: None,
            id: None,
            name: None,
            rating: None,
            deviation: None,
            char_short: None,
            char_long: None,
        }
    }
}

