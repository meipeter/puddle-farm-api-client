/*
 * puddle.farm API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlayerSet {
    /// Timestamp of the match
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    /// Player's rating value at the time of the match
    #[serde(rename = "own_rating_value", skip_serializing_if = "Option::is_none")]
    pub own_rating_value: Option<f32>,
    /// Player's rating deviation at the time of the match
    #[serde(rename = "own_rating_deviation", skip_serializing_if = "Option::is_none")]
    pub own_rating_deviation: Option<f32>,
    /// Floor of the match (e.g., \"Celestial\")
    #[serde(rename = "floor", skip_serializing_if = "Option::is_none")]
    pub floor: Option<String>,
    /// Opponent's name
    #[serde(rename = "opponent_name", skip_serializing_if = "Option::is_none")]
    pub opponent_name: Option<String>,
    /// Opponent's platform (PS, XB, PC)
    #[serde(rename = "opponent_platform", skip_serializing_if = "Option::is_none")]
    pub opponent_platform: Option<String>,
    /// Opponent's ID
    #[serde(rename = "opponent_id", skip_serializing_if = "Option::is_none")]
    pub opponent_id: Option<String>,
    /// Opponent's character (full name)
    #[serde(rename = "opponent_character", skip_serializing_if = "Option::is_none")]
    pub opponent_character: Option<String>,
    /// Opponent's character (short name)
    #[serde(rename = "opponent_character_short", skip_serializing_if = "Option::is_none")]
    pub opponent_character_short: Option<String>,
    /// Opponent's rating value at the time of the match
    #[serde(rename = "opponent_rating_value", skip_serializing_if = "Option::is_none")]
    pub opponent_rating_value: Option<f32>,
    /// Opponent's rating deviation at the time of the match
    #[serde(rename = "opponent_rating_deviation", skip_serializing_if = "Option::is_none")]
    pub opponent_rating_deviation: Option<f32>,
    /// Whether the player won the match
    #[serde(rename = "result_win", skip_serializing_if = "Option::is_none")]
    pub result_win: Option<bool>,
    /// Player's odds of winning the match
    #[serde(rename = "odds", skip_serializing_if = "Option::is_none")]
    pub odds: Option<f32>,
}

impl PlayerSet {
    pub fn new() -> PlayerSet {
        PlayerSet {
            timestamp: None,
            own_rating_value: None,
            own_rating_deviation: None,
            floor: None,
            opponent_name: None,
            opponent_platform: None,
            opponent_id: None,
            opponent_character: None,
            opponent_character_short: None,
            opponent_rating_value: None,
            opponent_rating_deviation: None,
            result_win: None,
            odds: None,
        }
    }
}

